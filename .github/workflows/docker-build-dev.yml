name: Docker Build and Push (Dev)

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        timeout-minutes: 5
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Docker authentication
        run: |
          echo "Verifying Docker authentication..."
          docker info | grep -i username || echo "Not logged in via docker info"
          cat ~/.docker/config.json | jq -r '.auths | keys[]' || echo "No auth configured"

      - name: Read VERSION file
        id: version
        run: echo "VERSION=$(cat VERSION)" >> $GITHUB_OUTPUT

      - name: Prepare image name
        id: image
        run: |
          IMAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.image.outputs.name }}
          tags: |
            type=raw,value=dev
          flavor: |
            suffix=-${{ matrix.platform == 'linux/amd64' && 'amd64' || 'arm64' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        timeout-minutes: 60
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.version.outputs.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  create-manifest:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        timeout-minutes: 5
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare image name
        id: image
        run: |
          IMAGE_NAME=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          echo "name=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Create and push multi-arch manifest
        run: |
          IMAGE=${{ env.REGISTRY }}/${{ steps.image.outputs.name }}
          echo "Creating manifest for: ${IMAGE}:dev"
          docker buildx imagetools create -t ${IMAGE}:dev \
            ${IMAGE}:dev-amd64 \
            ${IMAGE}:dev-arm64

      - name: Clean up architecture-specific tags
        uses: actions/delete-package-versions@v5
        continue-on-error: true
        with:
          package-name: 'lancache-manager'
          package-type: 'container'
          min-versions-to-keep: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ignore-versions: '^(latest|release|dev|\d+\.\d+\.\d+|\d+\.\d+|\d+)$'
