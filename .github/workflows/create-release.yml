name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.3.0 or 1.3.0.1)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(\.[0-9]+)?$ ]]; then
            echo "Error: Version must be in format X.Y.Z or X.Y.Z.W (e.g., 1.3.0 or 1.3.0.1)"
            exit 1
          fi
          echo "Version format is valid: $VERSION"

      - name: Check if tag already exists
        run: |
          VERSION="${{ github.event.inputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Error: Tag v$VERSION already exists"
            exit 1
          fi
          echo "Tag v$VERSION does not exist, proceeding..."

      - name: Update VERSION file
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "$VERSION" > VERSION
          echo "Updated VERSION file to $VERSION"

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit VERSION file
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git add VERSION
          git commit -m "Bump version to $VERSION"

      - name: Create Git tag on version commit
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git tag -a "v$VERSION" -m "Release version $VERSION"

      - name: Push commit and tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          git push origin main
          git push origin "v$VERSION"

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ github.event.inputs.version }}"
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "Release version $VERSION" \
            --latest
