{"version":3,"file":"Card-Ce1YyPom.js","sources":["../../src/utils/formatters.ts","../../src/components/ui/Card.tsx"],"sourcesContent":["import { FILE_SIZE_UNITS } from './constants';\r\n\r\n/**\r\n * Format bytes to human-readable string\r\n */\r\nexport function formatBytes(bytes: number, decimals = 2): string {\r\n  if (bytes === 0) return '0 B';\r\n  if (!bytes || bytes < 0) return 'N/A';\r\n\r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  const unit = FILE_SIZE_UNITS[i] || 'B';\r\n\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + unit;\r\n}\r\n\r\n/**\r\n * Format percentage\r\n */\r\nexport function formatPercent(value: number, decimals = 1): string {\r\n  if (value === null || value === undefined || isNaN(value)) return '0%';\r\n  return `${value.toFixed(decimals)}%`;\r\n}\r\n\r\n/**\r\n * Format date/time to locale string\r\n */\r\nexport function formatDateTime(dateString: string | Date | null | undefined): string {\r\n  if (!dateString) return 'N/A';\r\n\r\n  try {\r\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\r\n\r\n    if (isNaN(date.getTime())) return 'Invalid Date';\r\n\r\n    return date.toLocaleString('en-US', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n      second: '2-digit',\r\n      hour12: false\r\n    });\r\n  } catch (error) {\r\n    return 'Invalid Date';\r\n  }\r\n}\r\n\r\n/**\r\n * Format relative time (e.g., \"2 hours ago\")\r\n */\r\nexport function formatRelativeTime(dateString: string | Date | null | undefined): string {\r\n  if (!dateString) return 'N/A';\r\n\r\n  try {\r\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\r\n    const now = new Date();\r\n    const diffMs = now.getTime() - date.getTime();\r\n\r\n    if (diffMs < 0) return 'In the future';\r\n\r\n    const seconds = Math.floor(diffMs / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const hours = Math.floor(minutes / 60);\r\n    const days = Math.floor(hours / 24);\r\n\r\n    if (days > 7) {\r\n      return formatDateTime(date);\r\n    } else if (days > 0) {\r\n      return `${days} day${days > 1 ? 's' : ''} ago`;\r\n    } else if (hours > 0) {\r\n      return `${hours} hour${hours > 1 ? 's' : ''} ago`;\r\n    } else if (minutes > 0) {\r\n      return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;\r\n    } else {\r\n      return 'Just now';\r\n    }\r\n  } catch (error) {\r\n    return 'Invalid Date';\r\n  }\r\n}\r\n\r\n/**\r\n * Format duration from milliseconds\r\n */\r\nexport function formatDuration(ms: number): string {\r\n  if (!ms || ms < 0) return 'N/A';\r\n\r\n  const seconds = Math.floor(ms / 1000);\r\n  const minutes = Math.floor(seconds / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n  const days = Math.floor(hours / 24);\r\n\r\n  if (days > 0) {\r\n    return `${days}d ${hours % 24}h`;\r\n  } else if (hours > 0) {\r\n    return `${hours}h ${minutes % 60}m`;\r\n  } else if (minutes > 0) {\r\n    return `${minutes}m ${seconds % 60}s`;\r\n  } else {\r\n    return `${seconds}s`;\r\n  }\r\n}\r\n\r\n/**\r\n * Format number with commas\r\n */\r\nexport function formatNumber(num: number): string {\r\n  if (num === null || num === undefined || isNaN(num)) return '0';\r\n  return num.toLocaleString('en-US');\r\n}\r\n\r\n/**\r\n * Format IP address for display\r\n */\r\nexport function formatIpAddress(ip: string): string {\r\n  if (!ip) return 'Unknown';\r\n  if (ip === '127.0.0.1' || ip === 'localhost') return 'Local';\r\n  return ip;\r\n}\r\n\r\n/**\r\n * Get cache hit color based on percentage\r\n */\r\nexport function getCacheHitColor(percent: number): string {\r\n  if (percent >= 75) return 'green';\r\n  if (percent >= 50) return 'blue';\r\n  if (percent >= 25) return 'yellow';\r\n  return 'orange';\r\n}\r\n\r\n/**\r\n * Truncate string with ellipsis\r\n */\r\nexport function truncateString(str: string, maxLength = 50): string {\r\n  if (!str) return '';\r\n  if (str.length <= maxLength) return str;\r\n  return str.substring(0, maxLength - 3) + '...';\r\n}\r\n","import React from 'react';\r\n\r\ninterface CardProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  padding?: 'none' | 'sm' | 'md' | 'lg';\r\n}\r\n\r\nexport const Card: React.FC<CardProps> = ({ children, className = '', padding = 'lg' }) => {\r\n  const paddings = {\r\n    none: '',\r\n    sm: 'p-3',\r\n    md: 'p-4',\r\n    lg: 'p-6'\r\n  };\r\n\r\n  return (\r\n    <div className={`themed-card rounded-lg ${paddings[padding]} ${className}`}>{children}</div>\r\n  );\r\n};\r\n"],"names":["formatBytes","bytes","decimals","k","dm","unit","FILE_SIZE_UNITS","formatPercent","value","formatDateTime","dateString","date","Card","children","className","padding","paddings","jsx"],"mappings":"uFAKO,SAASA,EAAYC,EAAeC,EAAW,EAAW,CAC/D,GAAID,IAAU,EAAG,MAAO,MACxB,GAAI,CAACA,GAASA,EAAQ,EAAG,MAAO,MAEhC,MAAME,EAAI,KACJC,EAAKF,EAAW,EAAI,EAAIA,EAExB,EAAI,KAAK,MAAM,KAAK,IAAID,CAAK,EAAI,KAAK,IAAIE,CAAC,CAAC,EAC5CE,EAAOC,EAAgB,CAAC,GAAK,IAEnC,OAAO,YAAYL,EAAQ,KAAK,IAAIE,EAAG,CAAC,GAAG,QAAQC,CAAE,CAAC,EAAI,IAAMC,CAClE,CAKO,SAASE,EAAcC,EAAeN,EAAW,EAAW,CACjE,OAAIM,GAAU,MAA+B,MAAMA,CAAK,EAAU,KAC3D,GAAGA,EAAM,QAAQN,CAAQ,CAAC,GACnC,CAKO,SAASO,EAAeC,EAAsD,CACnF,GAAI,CAACA,EAAY,MAAO,MAExB,GAAI,CACF,MAAMC,EAAO,OAAOD,GAAe,SAAW,IAAI,KAAKA,CAAU,EAAIA,EAErE,OAAI,MAAMC,EAAK,QAAA,CAAS,EAAU,eAE3BA,EAAK,eAAe,QAAS,CAClC,MAAO,QACP,IAAK,UACL,KAAM,UACN,OAAQ,UACR,OAAQ,UACR,OAAQ,EAAA,CACT,CACH,MAAgB,CACd,MAAO,cACT,CACF,CCxCO,MAAMC,EAA4B,CAAC,CAAE,SAAAC,EAAU,UAAAC,EAAY,GAAI,QAAAC,EAAU,QAAW,CACzF,MAAMC,EAAW,CACf,KAAM,GACN,GAAI,MACJ,GAAI,MACJ,GAAI,KAAA,EAGN,OACEC,EAAAA,IAAC,MAAA,CAAI,UAAW,0BAA0BD,EAASD,CAAO,CAAC,IAAID,CAAS,GAAK,SAAAD,CAAA,CAAS,CAE1F"}